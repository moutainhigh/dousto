package com.ibm.oms.admin.action.order;

import java.math.BigDecimal;
import java.util.Arrays;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import org.apache.commons.lang.StringUtils;
import org.apache.struts2.convention.annotation.ParentPackage;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;

import com.ibm.oms.dao.constant.CancelOrderConst;
import com.ibm.oms.dao.constant.CommonConst;
import com.ibm.oms.dao.constant.OrderColumn;
import com.ibm.oms.dao.constant.OrderColumnTitle;
import com.ibm.oms.dao.constant.OrderStatus;
import com.ibm.oms.dao.constant.OrderStatusAction;
import com.ibm.oms.domain.persist.OrderInvoice;
import com.ibm.oms.domain.persist.OrderInvoice_;
import com.ibm.oms.domain.persist.OrderMain;
import com.ibm.oms.domain.persist.OrderOperateLog;
import com.ibm.oms.domain.persist.OrderPay;
import com.ibm.oms.domain.persist.OrderSearch;
import com.ibm.oms.domain.persist.OrderSub;
import com.ibm.oms.intf.intf.ResultDTO;
import com.ibm.oms.service.OrderItemService;
import com.ibm.oms.service.business.OrderCreateService;
import com.ibm.oms.service.business.OrderNoService;
import com.ibm.oms.service.business.OrderSplitService;
import com.ibm.oms.service.business.SaleAfterOrderService;
import com.ibm.oms.service.util.CommonString;
import com.ibm.sc.model.payment.PaymentMethod;
import com.ibm.sc.model.payment.PaymentMode;
import com.ibm.sc.model.sys.User;
import com.ibm.sc.util.DateUtils;
import com.ibm.stock.intf.SkuStockSearchService;
import com.mysql.fabric.xmlrpc.base.Array;


@ParentPackage("admin")
@SuppressWarnings("all")
public class OrderAction extends AbstractOrderAction {

	private static final long serialVersionUID = 1L;
	private final Logger logger = LoggerFactory.getLogger(getClass());
	
    @Autowired
    OrderNoService orderNoService;
    
    @Autowired
    OrderCreateService orderCreateService;
    @Autowired
    SaleAfterOrderService saleAfterOrderService;
    
    @Autowired
    private OrderItemService orderItemService;
    
    @Autowired
    private SkuStockSearchService skuStockSearchService;
    
    @Autowired
    private OrderSplitService orderSplitService;
    
	public String execute() throws Exception {
	    // 默认查询全部和已完成订单时，由于数据量太多，查询太慢，所以不去查询数据。
	    if(column == 0 || column == 7)
	    {
	        // 设置已完成、全部订单页面标题
	        switch (column) {
           case OrderColumn.ORDER_FINISHED: // 已完成
	                this.orderColumnTitle = OrderColumnTitle.FINISHED;
	                break;
	            case OrderColumn.ORDER_ALL:
	                this.orderColumnTitle = OrderColumnTitle.ALL;
	                break;
	        }
	    }
	    //待审核订单加载俩下拉框
	    if(column == 1){
	    	this.refreshLogisticsCodes();
	    	this.refreshWareHouses();
	    }
		this.search();
		// 如果是虚拟商品
        if (CommonConst.OrderMain_OrderType_VIRTUAL.getCode().equals(
                orderSearch.getOrderType())) {
            return "virtual_list";
        }
		return "list";
	}
	
	public String updateStatusConfirm(){
		String orderSubNo = this.getParameter("orderSubNo");
		String statusConfirm = this.getParameter("statusConfirm");
		
		if (OrderStatus.StatusTypeCode_Order_StatusConfirm_Pass.getCode().equalsIgnoreCase(statusConfirm)){
			orderStatusService.saveProcess(orderSubNo , OrderStatusAction.S014150, null, null, null);
		}else if(OrderStatus.StatusTypeCode_Order_StatusConfirm_Cancel.getCode().equalsIgnoreCase(statusConfirm)){
			orderStatusService.saveProcess(orderSubNo ,  OrderStatusAction.S014142, null, null, null);
		}
		
		return "update_status_confirm";
	}
	
	public String search(){
	    // 对支付日期做个处理
	    Date payTimeFrom = orderPay.getPayTimeFrom();
        Date payTimeTo= orderPay.getPayTimeTo();
        
        Date newPayTimeFrom = null;
        Date newPayTimeTo = null;

        if (!(payTimeFrom == null) && !(payTimeTo == null)) {
        	newPayTimeFrom = getStartDate(payTimeFrom);
        	newPayTimeTo = getEndDate(payTimeTo);
        	orderPay.setPayTimeFrom(newPayTimeFrom);
            orderPay.setPayTimeTo(newPayTimeTo);
            
        } else if (!(null == payTimeFrom)) {
        	newPayTimeFrom = getStartDate(payTimeFrom);
        	orderPay.setPayTimeFrom(newPayTimeFrom);
        } else if (!(null == payTimeTo)) {
        	newPayTimeTo = getEndDate(payTimeTo);
            orderPay.setPayTimeTo(newPayTimeTo);
        }
        //END yusl 1/12
	    // 对下单日期做个处理
	    Date orderTimeFrom = orderMain.getOrderTimeFrom();
        Date orderTimeTo = orderMain.getOrderTimeTo();
        
        Date newOrderTimeFrom = null;
        Date newOrderTimeTo = null;

        if (!(orderTimeFrom == null) && !(orderTimeTo == null)) {
            newOrderTimeFrom = getStartDate(orderTimeFrom);
            newOrderTimeTo = getEndDate(orderTimeTo);
            orderMain.setOrderTimeFrom(newOrderTimeFrom);
            orderMain.setOrderTimeTo(newOrderTimeTo);
            
        } else if (!(null == orderTimeFrom)) {
            newOrderTimeFrom = getStartDate(orderTimeFrom);
            orderMain.setOrderTimeFrom(newOrderTimeFrom);
        } else if (!(null == orderTimeTo)) {
            newOrderTimeTo = getEndDate(orderTimeTo);
            orderMain.setOrderTimeTo(newOrderTimeTo);
        }
        
        
		orderSearch = new OrderSearch(orderMain, orderSub, orderItem, orderPay,transportArea,distributeAddress,selfTakePoint,includeOrNot);
		pager = orderSearchService.findByOrderSearch(column, orderSearch, pager);
		
		// 设置订单页面标题
		super.setOrderColumnTitle(column);
		
		// 如果是虚拟商品
        if (CommonConst.OrderMain_OrderType_VIRTUAL.getCode().equals(
                orderSearch.getOrderType())) {
            return "virtual_list";
        }
		return "list";
	}
	
	public String view(){
		String orderNo = this.getParameter("orderNo");
		order = orderMainService.findByOrderNo(orderNo);
		
		/*String orderSubNo = this.getParameter("orderSubNo");
		order = orderMainService.getByOrderSubNo(orderSubNo);*/
		if (null == order) {
            this.setActionMessages(Arrays.asList("找不到" + orderNo + "对应的主订单！"));
            return ERROR;
        }
        List<OrderSub> orderSubs = order.getOrderSubs();
		if( orderSubs != null && orderSubs.size()>0){
			orderSub = orderSubs.get(0);
			// 设置省、城市、县区组合的地址
			setOrderSubCombinedAddress(orderSub.getAddressCode());
		}
		
		this.initOrderInvoice();
		
		return "detail";
	}
	
	
	public String viewSub(){
		
		String orderSubNo =  this.getParameter("orderSubNo");
		orderSub = orderSubService.getByOrderSubNo(orderSubNo);
		return "sub_input";
		
	}
	
	public String update(){
		OrderMain origOrder = orderMainService.get(order.getId());
		//this should be replaced with new parameter value
		orderMainService.update(origOrder);
		
		 OrderSub tmpOrderSub =  orderSubService.get(orderSub.getId());
		 tmpOrderSub.setUserName(orderSub.getUserName());
		 tmpOrderSub.setMobPhoneNum(orderSub.getMobPhoneNum());
		 tmpOrderSub.setPhoneNum(orderSub.getPhoneNum());
		 tmpOrderSub.setAddressDetail(orderSub.getAddressDetail());
		 tmpOrderSub.setPostCode(orderSub.getPostCode());
		 orderSubService.update(tmpOrderSub);
		return "input";
	}
	
	public String history(){
		column = 0;
		if(orderSub==null){
			orderSub = new OrderSub();
		}
		
		String memberNo = this.getParameter("memberNo");
		if(StringUtils.isNotBlank(memberNo)){
			orderMain.setMemberNo(memberNo);
		}
		
	
		orderSearch = new OrderSearch(orderMain, orderSub, orderItem, orderPay,transportArea,distributeAddress,selfTakePoint,includeOrNot);
		
		Calendar calendar = Calendar.getInstance();  
		Date currentDate = calendar.getTime();
		calendar.add(Calendar.MONTH, -3);
		Date from = calendar.getTime();
		orderSearch.setOrderTimeFrom(from);
		orderSearch.setOrderTimeTo(currentDate);
		pager = orderSearchService.findByOrderSearch(column, orderSearch, pager);
		return "order_history";
	}
	
	public String updateSubDetail() {
		
		OrderMain morder1 = orderMainService.get(order.getId());
		morder1.setNeedInvoice(order.getNeedInvoice());

		OrderSub tmpOrderSub = orderSubService.get(orderSub.getId());
		
		OrderOperateLog log = this.createOrderOperateLog();
		StringBuffer oldData = new StringBuffer();
		StringBuffer newData = new StringBuffer();
		StringBuffer content = new StringBuffer();
		if(!CommonString.equals(morder1.getClientServiceRemark(), order.getClientServiceRemark())){
			content.append("客服备注：</br>");
			oldData.append(StringUtils.trimToEmpty(morder1.getClientServiceRemark())).append("</br>");
			newData.append(StringUtils.trimToEmpty(order.getClientServiceRemark())).append("</br>");
		}
		
		morder1.setClientServiceRemark(order.getClientServiceRemark());
		morder1.setDeliveryDateFlag(order.getDeliveryDateFlag());
		orderMainService.update(morder1);
		if(!CommonString.equals(tmpOrderSub.getUserName(), orderSub.getUserName())){
			content.append("收货人姓名：</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderSub.getUserName())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderSub.getUserName())).append("</br>");
		}
	
		if(!CommonString.equals(tmpOrderSub.getPhoneNum(), orderSub.getPhoneNum())){
			content.append("收货人手机：</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderSub.getPhoneNum())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderSub.getPhoneNum())).append("</br>");
		}
		
		if(!CommonString.equals(tmpOrderSub.getMobPhoneNum(), orderSub.getMobPhoneNum())){
			content.append("收货人电话：</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderSub.getMobPhoneNum())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderSub.getMobPhoneNum())).append("</br>");
		}
		
		if(!CommonString.equals(tmpOrderSub.getAddressDetail(), orderSub.getAddressDetail())){
			content.append("收货人地址:</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderSub.getAddressDetail())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderSub.getAddressDetail())).append("</br>");
		}
		
		if(!CommonString.equals(tmpOrderSub.getPostCode(), orderSub.getPostCode())){
			content.append("收货人邮编:</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderSub.getPostCode())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderSub.getPostCode())).append("</br>");
		}
		
		String oPickTime="";
		if(tmpOrderSub.getPickTime()!=null){
			oPickTime = DateUtils.formatGeneralDate(tmpOrderSub.getPickTime());
		}
		
		List<CommonConst> dtList =  commonEnum.getDeliveryTimeList();
		
		log.setOldData(oldData.toString());
		
		tmpOrderSub.setUserName(orderSub.getUserName());
		tmpOrderSub.setMobPhoneNum(orderSub.getMobPhoneNum());
		tmpOrderSub.setPhoneNum(orderSub.getPhoneNum());
		tmpOrderSub.setAddressDetail(orderSub.getAddressDetail());
		tmpOrderSub.setPostCode(orderSub.getPostCode());

		tmpOrderSub.setPickTime(orderSub.getPickTime());
		//tmpOrderSub.setHopeArrivalTime(orderSub.getHopeArrivalTime());
		orderSubService.update(tmpOrderSub);
		

		String nPickTime="";
		if(orderSub.getPickTime()!=null){
			nPickTime = DateUtils.formatGeneralDate(orderSub.getPickTime());
		}
		
		if(!CommonString.equals(oPickTime, nPickTime)){
			content.append("自提时间:</br>");
			oldData.append(StringUtils.trimToEmpty(oPickTime)).append("</br>");
			newData.append(StringUtils.trimToEmpty(nPickTime)).append("</br>");
		}
		log.setContent(content.toString());
		log.setReason("保存收货人信息/客服备注/配送信息 ");
		log.setNewData(newData.toString());
		log.setIP(getIpAddr());
		try {
			orderOperateLogService.save(log);
			this.commonDate();
		} catch (Exception e) {
			e.printStackTrace();
			logger.error("updateSubDetail {}", e);
        	setActionMessages(Arrays.asList("系统异常：" + e.getMessage()));
        	return ERROR;
		}
		
		// map
		// 订单配送时间

		//return "detail";
		setActionMessages(Arrays.asList("保存成功！"));
		return SUCCESS;
	}
	/**
	 * 拆单
	 * Description:
	 * @return
	 */
	public String splitOrder(){
		String[] orderSubNos = this.getParameterValues("ids[]");
		if(null == orderSubNos || orderSubNos.length == 0){
			return ajaxJsonSuccessMessage("订单号不可为空");
		}
		
		String splitType = this.getParameter("splitType");
		String sku = this.getParameter("sku");
		if(StringUtils.isBlank(splitType)) {
			return ajaxJsonSuccessMessage("清选择拆单方式");
		} else {
			if(orderSplitService.SPLITTYPE_ASSIGN.equals(splitType)){
				if (StringUtils.isBlank(sku)){
					return ajaxJsonSuccessMessage("清填写拆单sku");
				}
			}
		}
		
		StringBuilder result = new StringBuilder("");
		for (String orderSubNo : orderSubNos){
			try {
				if(orderSplitService.handleOrderSplit(orderSubNo, splitType, sku)){
					result.append(orderSubNo);
					result.append("拆单成功\n");
				} else {
					result.append(orderSubNo);
					result.append("拆单失败\n");
				}
			} catch (Exception e) {
				result.append(orderSubNo);
				result.append("拆单失败\n");
				e.printStackTrace();
			}
		}
		
		return ajaxJsonSuccessMessage(result.toString());
	}
	
	/**
	 * 更新发票信息
	 * @return
	 */
	public String updateOrderInvoice() {
		
		OrderMain morder1 = orderMainService.get(order.getId());
		
		StringBuffer oldData = new StringBuffer();
		StringBuffer newData = new StringBuffer();
		StringBuffer content = new StringBuffer();
		
		OrderOperateLog log = this.createOrderOperateLog();
		
		if(order.getNeedInvoice()!=null){
			if(order.getNeedInvoice().equals(morder1.getNeedInvoice())){
				content.append("是否需要发票:</br>");
				
				if(morder1.getNeedInvoice()!=null && morder1.getNeedInvoice().longValue()==1){
					oldData.append("是</br>");
				}else{
					oldData.append("否</br>");
				}
				
				if(order.getNeedInvoice()!=null && order.getNeedInvoice().longValue()==1){
					newData.append("是</br>");
				}else{
					newData.append("否</br>");
				}
			}
		}

		morder1.setNeedInvoice(order.getNeedInvoice());
		orderMainService.update(morder1);
		
		if(order.getNeedInvoice()!=null && order.getNeedInvoice()==0){
			orderInvoice.setInvoiceContent("");
			orderInvoice.setInvoiceNum("");
			orderInvoice.setInvoiceHead("");
		}
		
		OrderInvoice tmpOrderInvoice;
		if(null == orderInvoice.getId()){
			tmpOrderInvoice = new OrderInvoice();
		}else{
			tmpOrderInvoice = orderInvoiceService.get(orderInvoice.getId());
		}
		
		if(!CommonString.equals(tmpOrderInvoice.getInvoiceNum(), orderInvoice.getInvoiceNum())){
			content.append("发票号码:</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderInvoice.getInvoiceNum())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderInvoice.getInvoiceNum())).append("</br>");
		}
		
		if(!CommonString.equals(tmpOrderInvoice.getInvoiceHead(), orderInvoice.getInvoiceHead())){
			content.append("发票头:</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderInvoice.getInvoiceHead())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderInvoice.getInvoiceHead())).append("</br>");
		}
		
		if(!CommonString.equals(tmpOrderInvoice.getInvoiceContent(), orderInvoice.getInvoiceContent())){
			content.append("发票内容:</br>");
			oldData.append(StringUtils.trimToEmpty(tmpOrderInvoice.getInvoiceContent())).append("</br>");
			newData.append(StringUtils.trimToEmpty(orderInvoice.getInvoiceContent())).append("</br>");
		}
		
		/*// 如果不需要发票且已存在发票，则更新为删除
		if (IS_NEED_INVOICE_NO.equals(order.getNeedInvoice()) && null != orderInvoice.getId()) {
			tmpOrderInvoice.setIsDeleted(1L);
			orderInvoiceService.update(tmpOrderInvoice);
		} else if (IS_NEED_INVOICE_YES.equals(order.getNeedInvoice())) { // 如果需要发票
			tmpOrderInvoice.setIsDeleted(0L);*/
			tmpOrderInvoice.setInvoiceNum(orderInvoice.getInvoiceNum());
			tmpOrderInvoice.setInvoiceHead(orderInvoice.getInvoiceHead());
			tmpOrderInvoice.setInvoiceContent(orderInvoice.getInvoiceContent());
			if (null == orderInvoice.getId()) { // 不存在发票则添加新的发票
				tmpOrderInvoice.setIdOrder(order.getId());
				tmpOrderInvoice.setIdOrderSub(orderSub.getId());
				tmpOrderInvoice.setOrderNo(order.getOrderNo());
				tmpOrderInvoice.setOrderSubNo(orderSub.getOrderSubNo());
				tmpOrderInvoice.setIsDeleted(0L);
				
				// 如果ORDER_INVOICE表中已有该id_order对应的记录，则直接更新
				List<OrderInvoice> orderInvoiceList = orderInvoiceService.findByField(OrderInvoice_.idOrder, order.getId());
				if(null != orderInvoiceList && orderInvoiceList.size() > 0)
				{
					tmpOrderInvoice.setId(orderInvoiceList.get(0).getId());
					
					// 检查数据库该发票号码是否存在
					Boolean isExist = checkInvoiceNumIsExist(tmpOrderInvoice);
					if(isExist)
					{
						this.setActionMessages(Arrays.asList("该发票号码已存在"));
						return ERROR;
					}
						
					orderInvoiceService.update(tmpOrderInvoice);
				}
				else
				{
					List<OrderInvoice> orderInvoices = orderInvoiceService.findByField(OrderInvoice_.invoiceNum, orderInvoice.getInvoiceNum());
					if(null != orderInvoices && orderInvoices.size() > 0)
					{
						String invoiceNum = tmpOrderInvoice.getInvoiceNum();
						if(null != invoiceNum && invoiceNum.equals(orderInvoices.get(0).getInvoiceNum()))
						{
							this.setActionMessages(Arrays.asList("该发票号码已存在"));
							return ERROR;
						}
					}
					orderInvoiceService.save(tmpOrderInvoice);
				}
			} else { 
				
				// 检查数据库该发票号码是否存在
				Boolean isExist = checkInvoiceNumIsExist(tmpOrderInvoice);
				if(isExist)
				{
					this.setActionMessages(Arrays.asList("该发票号码已存在"));
					return ERROR;
				}
				
				// 存在则直接更新
				orderInvoiceService.update(tmpOrderInvoice);
			}
		//}
		//
		OrderSub tmpOrderSub = orderSubService.get(orderSub.getId());
		//if(tmpOrderSub == null || tmpOrderSub.getInvoicePrinted() == null ){
		if(tmpOrderSub == null){	
	            setActionMessages(Arrays.asList("查找子订单或子订单发票打印信息为空"));
	            return ERROR;
		}
        if (tmpOrderSub.getInvoicePrinted()!=null && tmpOrderSub.getInvoicePrinted().equals(orderSub.getInvoicePrinted())) {
            content.append("是否已开发票:</br>");
            if (tmpOrderSub.getInvoicePrinted() == 1) {
                oldData.append("已开发票</br>");
            } else {
                oldData.append("未开发票</br>");
            }

            if (orderSub.getInvoicePrinted() == 1) {
                newData.append("已开发票</br>");
            } else {
                newData.append("未开发票</br>");
            }
        }

        tmpOrderSub.setInvoicePrinted(orderSub.getInvoicePrinted());
        orderSubService.update(tmpOrderSub);
		
		log.setNewData(newData.toString());
		log.setOldData(oldData.toString());
		log.setReason("修改发票信息");
		log.setContent(content.toString());
		log.setIP(getIpAddr());
		try {
			orderOperateLogService.save(log);
			this.commonDate();
		} catch (Exception e) {
			logger.error("updateOrderInvoice {}", e);
        	setActionMessages(Arrays.asList("系统异常：" + e.getMessage()));
        	return ERROR;
		}
		
		//return "detail";
		setActionMessages(Arrays.asList("保存成功！"));
    	return SUCCESS;
	}

	/**
	 * 检查数据库中传人的发票号码是否存在
	 * @param tmpOrderInvoice
	 */
	private Boolean checkInvoiceNumIsExist(OrderInvoice tmpOrderInvoice) {
		
		// 根据发票号码查询数据库
		List<OrderInvoice> orderInvoices = orderInvoiceService.findByField(OrderInvoice_.invoiceNum, orderInvoice.getInvoiceNum());
		
		if(null != orderInvoices && orderInvoices.size() > 0)
		{
			Long invoiceNumId = orderInvoices.get(0).getId();
			// 如果不是同一条记录
			if(!tmpOrderInvoice.getId().equals(invoiceNumId))
			{
				return true;
			}
		}
		return false;
	}
	
	/**
	 * 取消订单
	 * @return
	 */
	public String cancelOrder() {
		String[] orderNos = this.getParameterValues("ids");//StringUtils.split(order.getOrderNo(), ",");
		// 从界面上获取取消订单原因编号
		String cancelReasonNo = order.getCancelReasonNo();
		
		for (String orderNo : orderNos) {
			order = orderMainService.findByOrderNo(orderNo);
			OrderOperateLog log = this.createOrderOperateLog();
			log.setOrderNo(orderNo);
			log.setReason("取消订单");
			OrderMain newOrderMain = orderMainService.findByOrderNo(orderNo);
			
			// 取消订单原因编号
            newOrderMain.setCancelReasonNo(cancelReasonNo);
			
			String totalStauts = newOrderMain.getStatusTotal();
			CancelOrderConst cancelScene = CancelOrderConst.CancelOrder_Scene_VALIDATED;
			if(OrderStatus.ORDER_VALIDATED.getCode().equals(totalStauts)){
				cancelScene = CancelOrderConst.CancelOrder_Scene_VALIDATED;
			}else if(OrderStatus.ORDER_INVENTORY_DEDUCT_FAILED.getCode().equals(totalStauts)){
			    cancelScene = CancelOrderConst.CancelOrder_Scene_InventoryFail;
			}else if(OrderStatus.ORDER_PAYING.getCode().equals(totalStauts)){
                cancelScene = CancelOrderConst.CancelOrder_Scene_Customer;
            }else{
				cancelScene = CancelOrderConst.CancelOrder_Scene_Saler;
			}

			
			boolean isCancel = true; //【saveCancelOrder中实现】
			/*try {
				if (cancelScene==CancelOrderConst.CancelOrder_Scene_VALIDATED) { // 未出库取消
		            // 取消出库接口
					isCancel= this.orderCreateService.inventoryCancel(newOrderMain);
		        } else {
		            // 解锁接口
		            List<OrderMain> orderMainList = new ArrayList<OrderMain>();
		            orderMainList.add(newOrderMain);
		            this.orderCreateService.inventoryUnLock(orderMainList);
		        }
			} catch (Exception e) {
				setActionMessages(Arrays.asList("调库存系统异常：" + e.getMessage()));
				return "success";
			}*/
			
			try {
				if(isCancel){
					String orderSubNo = orderNoService.getDefaultOrderSubNoByOrderNo(orderNo);
					ResultDTO resultDTO = saleAfterOrderService.cancelOrder(orderSubNo ,cancelScene);
					if(resultDTO.getResult()==-1){
						setActionMessages(Arrays.asList(resultDTO.getResultMessage()));
					}else{
						setActionMessages(Arrays.asList("订单取消成功。"));
					}
				}else{
					setActionMessages(Arrays.asList("订单无法取消,调库存取消出库失败!"));
				}
			} catch (Exception e) {
				setActionMessages(Arrays.asList("系统异常：" + e.getMessage()));
			}
			orderOperateLogService.save(log);	
		}
	//	this.commonDate();
		return "success";
	}
	
	/**
	 * 批量取消订单
	 * @return
	 */
	public String batchCancelOrder() {
		String[] orderNos = this.getParameterValues("ids[]");//StringUtils.split(order.getOrderNo(), ",");
		String cancelReasonNo = this.getParameter("cancelReasonNo");
		StringBuffer sb = new StringBuffer();
		for (String orderNo : orderNos) {
			sb.append("订单号："+ orderNo);
			order = orderMainService.findByOrderNo(orderNo);
			OrderOperateLog log = this.createOrderOperateLog();
			log.setOrderNo(orderNo);
			log.setReason("取消订单");
			orderOperateLogService.save(log);    
			OrderMain newOrderMain = orderMainService.findByOrderNo(orderNo);
			
			// 取消订单原因编号
			newOrderMain.setCancelReasonNo(cancelReasonNo);
			
			String totalStauts = newOrderMain.getStatusTotal();
			//0160, 0151, 0130,否则一概当作0141
			CancelOrderConst  cancelScene = null;
            if (OrderStatus.ORDER_VALIDATED.getCode().equals(totalStauts)) {
                cancelScene = CancelOrderConst.CancelOrder_Scene_VALIDATED;
            } else if (OrderStatus.ORDER_INVENTORY_DEDUCT_FAILED.getCode().equals(totalStauts)) {
                cancelScene = CancelOrderConst.CancelOrder_Scene_InventoryFail;
            } else if(OrderStatus.ORDER_PAYING.getCode().equals(totalStauts)){
                cancelScene = CancelOrderConst.CancelOrder_Scene_Customer;
            } else {
                cancelScene = CancelOrderConst.CancelOrder_Scene_Saler;
            }

			
//			boolean isCancel = true;//【saveCancelOrder中实现】
			/*try {
				if (cancelScene==CancelOrderConst.CancelOrder_Scene_VALIDATED) { // 未出库取消
		            // 取消出库接口
					isCancel= this.orderCreateService.inventoryCancel(newOrderMain);
		        } else {
		            // 解锁接口
		            List<OrderMain> orderMainList = new ArrayList<OrderMain>();
		            orderMainList.add(newOrderMain);
		            
		            this.orderCreateService.inventoryUnLock(orderMainList);
		        }
			} catch (Exception e) {
				sb.append("订单取消失败!");
				break;
			}*/
            try {
                String orderSubNo = orderNoService.getDefaultOrderSubNoByOrderNo(orderNo);
                ResultDTO resultDTO = saleAfterOrderService.cancelOrder(orderSubNo, cancelScene);
                if (resultDTO.getResult() == -1) {
                    sb.append(resultDTO.getResultMessage());
                } else {
                    sb.append("订单取消成功!");
                }
            } catch (Exception e) {
                sb.append("订单取消失败!");

            }
		}
		
		return ajaxJsonSuccessMessage(sb.toString());
	}
	
	/**
	 * 审批通过,详情页面单个审核
	 * @return
	 */
	public String approveOrder(){
		OrderOperateLog log = this.createOrderOperateLog();
		log.setReason("审批通过");
        String orderNo = order.getOrderNo();
        try {
            orderMain = orderMainService.findByOrderNo(orderNo);
            String auditResult = orderCreateService.manualAudit(orderNo, true);
            if(StringUtils.isBlank(auditResult)){
                //处理成功
                setActionMessages(Arrays.asList("订单审核成功!"));
                orderOperateLogService.save(log);	
            }else{
                //处理失败
                setActionMessages(Arrays.asList("订单审核失败!"));
//                sb.append("订单审核失败!"+auditResult);
            }
        } catch (Exception e) {
        	
            logger.error("{}", e.getMessage());
            setActionMessages(Arrays.asList("订单审核失败!"));
        }
		
		this.commonDate();
		return "success";
	}
	
	
	
	/**
	 * 添加 更新支付
	 * @return
	 */
	public String updateOrderPayment(){
		OrderOperateLog log = this.createOrderOperateLog();
		
		String id = this.getParameter("ids");
		String payCode = this.getParameter("payCode");
		String payAmount = this.getParameter("payAmount");
		String serialNo = this.getParameter("serialNo");
		
		String orderNo = order.getOrderNo();
		
		if(id.equals("")) {
			orderPay.setId(null);
			log.setReason("添加支付");
			
			// 数据库中已有的支付方式
            List<OrderPay> orderPayListDB = this.orderPayService.getByOrderMainNo(orderNo);
            for (OrderPay pay : orderPayListDB) {
                if (null != payCode && payCode.equals(pay.getPayCode())) {
                    this.setActionMessages(Arrays.asList("不能添加重复的在线支付方式！"));
                    return ERROR;
                }
            }
		} else {
			orderPay.setId(Long.parseLong(id));
			log.setReason("更新支付");
		}		
		orderPay.setPayCode(payCode);
		
		Map<String, PaymentMode> payModeMap =	paymentModeUtil.getPaymentModeMap();
		
		PaymentMode payMode = payModeMap.get(payCode);
        
		if(payMode==null){
			
			List<PaymentMethod> methodList = paymentMethodUtil.getPaymentMethodList();
			for (PaymentMethod paymentMethod : methodList) {
				if(paymentMethod.getId().toString().equals(payCode)){
					orderPay.setPayName(paymentMethod.getName());
					break;
				}
			}
		}else{
			orderPay.setPayName(payMode.getName());
		}
        orderPay.setPayAmount(new BigDecimal(payAmount));     
        orderPay.setSerialNo(serialNo);      
		orderPay.setOrderNo(order.getOrderNo());
	
		orderPaymentService.saveOrderPaymentFromPage(orderPay);
		
		orderOperateLogService.save(log);
		this.commonDate();
		return SUCCESS;
	}
	
	/**
	 * 删除支付
	 * @return
	 */
	public String deleteOrderPayment(){
		OrderOperateLog log = this.createOrderOperateLog();
		log.setReason("删除支付");
		String ids = this.getParameter("payId");
		
		orderPaymentService.deleteOrderPaymentFromPage(ids);
		orderOperateLogService.save(log);
		this.commonDate();
		
		return SUCCESS;
	}
	
	
	
    public String updateSub(){
    	OrderSub origOrderSub = orderSubService.get(orderSub.getId());
    	orderSubService.update(origOrderSub);
		return "sub_input";
	}
    

    /**
     * 订单人工审核, 列表页批量审核
     * @return
     */
    public String orderManualAudit(){
    	//String[] orderNos = this.getParameterValues("ids");//StringUtils.split(order.getOrderNo(), ",");
    	String[] orderSubNos = this.getParameterValues("ids[]");//StringUtils.split(order.getOrderNo(), ",");
    	StringBuffer sb = new StringBuffer();
    	for(String orderSubNo:orderSubNos)
    	{
    		sb.append("订单号："+orderSubNo);
    		try {
    			String orderNo = orderNoService.getOrderNoBySubNo(orderSubNo);;
				String auditResult = orderCreateService.manualAudit(orderNo, true);
				if(StringUtils.isBlank(auditResult)){
					//处理成功
					//setActionMessages(Arrays.asList(auditResult));
					sb.append("订单审核成功!");
				}else{
					//处理失败
					setActionMessages(Arrays.asList(auditResult));
					sb.append("订单审核失败!"+auditResult);
				}
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单审核失败!");
				logger.error("{}", e.getMessage());
			}
    	}
    	//return SUCCESS;
    	return ajaxJsonSuccessMessage(sb.toString());
    }
    
	/**
	 * 批量修改快递公司
	 * 
	 * @return
	 */
	public String updateOrderDelivery() {
		String[] orderSubNos = this.getParameterValues("ids[]");
		if (null == orderSubNos || orderSubNos.length == 0) {
			return "订单号不可为空";
		}

		String deliveryMerchantNo = this.getParameter("deliveryMerchantNo");
		if (StringUtils.isBlank(deliveryMerchantNo)) {
			return "物流公司不可为空";
		}
		String deliveryMerchantName = this.getParameter("deliveryMerchantName");

		StringBuffer sb = new StringBuffer();
		OrderSub newOrderSub = new OrderSub();
		newOrderSub.setDeliveryMerchantNo(deliveryMerchantNo);
		newOrderSub.setDeliveryMerchantName(deliveryMerchantName);
		for (String orderSubNo : orderSubNos) {
			sb.append("订单号：" + orderSubNo);
			try {
				newOrderSub.setOrderSubNo(orderSubNo);
				orderCreateService.updateDeliveryByOrderSubNo(newOrderSub);
				
				sb.append("订单修改成功!");
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单修改失败!");
				logger.error("{}", e.getMessage());
			}
		}
		
		return ajaxJsonSuccessMessage(sb.toString());
	}
	
	/**
	 * 批量修改发货仓库
	 * 
	 * @return
	 */
	public String batchUpdateWareHouseNo() {
		String[] orderSubNos = this.getParameterValues("ids[]");
		if (null == orderSubNos || orderSubNos.length == 0) {
			return "订单号不可为空";
		}

		String wareHouseNo = this.getParameter("wareHouseNo");
		if (StringUtils.isBlank(wareHouseNo)) {
			return "仓库编码不可为空";
		}

		StringBuffer sb = new StringBuffer();
		for (String orderSubNo : orderSubNos) {
			sb.append("订单号：" + orderSubNo);
			try {
				orderItemService.updateWareHouseNoBySubNo(orderSubNo, wareHouseNo);
				sb.append("订单修改成功!");
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单修改失败!");
				logger.error("{}", e.getMessage());
			}
		}
		
		return ajaxJsonSuccessMessage(sb.toString());
	}
	
	/**
	 * 批量修改发货仓库
	 * 
	 * @return
	 */
	public String batchUpdateClientServiceRemark() {
		String[] orderSubNos = this.getParameterValues("ids[]");
		if (null == orderSubNos || orderSubNos.length == 0) {
			return "订单号不可为空";
		}

		String clientServiceRemark = this.getParameter("clientServiceRemark");
		if (StringUtils.isBlank(clientServiceRemark)) {
			return "留言不可为空";
		}

		StringBuffer sb = new StringBuffer();
		for (String orderSubNo : orderSubNos) {
			sb.append("订单号：" + orderSubNo);
			try {
				orderMainService.updateClientServiceRemarkBySubNo(orderSubNo, clientServiceRemark);
				sb.append("订单修改成功!");
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单修改失败!");
				logger.error("{}", e.getMessage());
			}
		}
		
		return ajaxJsonSuccessMessage(sb.toString());
	}
	
    
    public List<CommonConst> getDeliveryTimeList(){
		return commonEnum.getDeliveryTimeList();
	}

	private void commonDate(){
		order = orderMainService.findByOrderNo(order.getOrderNo());
		
		if( order.getOrderSubs() != null && order.getOrderSubs().size()>0){
			orderSub = order.getOrderSubs().get(0);
		}
		this.initOrderInvoice();
		redirectionUrl = "order!view.action?orderNo="+order.getOrderNo()+"&column="+column;
	}
	
    private void initOrderInvoice() {
        if (order.getOrderInvoices() != null && order.getOrderInvoices().size() > 0) {
            List<OrderInvoice> tmpList = order.getOrderInvoices();
            for (OrderInvoice invoice : tmpList) {
                if (null == invoice.getIsDeleted() || !invoice.getIsDeleted().equals(1L)) {
                    orderInvoice = invoice;
                    break;
                }
            }
        }
    }
    
    private OrderOperateLog createOrderOperateLog(){
    	User user = userService.getLoginUser();
    	OrderOperateLog log = new OrderOperateLog();
    	log.setIdOrder(order.getId());
    	log.setOrderNo(order.getOrderNo());
    	String orderSubNo = orderNoService.getDefaultOrderSubNoByOrderNo(order.getOrderNo());
    	log.setOrderSubNo(orderSubNo);
    	log.setDateCreated(new Date());
    	log.setCreatedBy(user.getUserName());
    	log.setOperator(user.getUserName());
    	
    	return log;
    }
    
    /**
     * 更改订单状态
     * @return
     */
    public String changeOrderStatus()
    {
    	ResultDTO resultDTO = this.orderCreateService.handlerOnlineOrderStatusPay(orderSub);
    	if(!CommonConst.Common_Result_OK.getCode().equals(resultDTO.getResultMessage()))
    	{
    		this.setActionMessages(Arrays.asList(resultDTO.getResultMessage()));
    		return ERROR;
    	}
    	return SUCCESS;
    }
    
    /**
     * 加入黑名单
     * @return
     */
    public String addBlacklist(){
    	String orderNo = order.getOrderNo();
    	OrderOperateLog log = this.createOrderOperateLog();
		log.setOrderNo(orderNo);
		log.setReason("加入黑名单");
    	try {
    		String msg = orderCreateService.addBlackList(orderNo, blackType);
			log.setContent(msg);
			setActionMessages(Arrays.asList(msg));
		} catch (Exception e) {
			log.setContent("加入黑名单失败!");
			setActionMessages(Arrays.asList("系统异常：" + e.getMessage()));
		}
		orderOperateLogService.save(log);	
    	return SUCCESS;
    }
    
    
    public String updateOrderSuspension(){
    	String[] orderSubNos = this.getParameterValues("ids[]");//StringUtils.split(order.getOrderNo(), ",");
    	StringBuffer sb = new StringBuffer();
    	for(String orderSubNo:orderSubNos)
    	{		
    		
    		try {

    			String orderNo = orderNoService.getOrderNoBySubNo(orderSubNo);;
				String sb2=orderMainService.updateOrderSuspension(orderNo);

				sb.append(sb2);
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单挂起失败!");
				logger.error("{}", e.getMessage());
			}
    	}
    	//return SUCCESS;
    	return ajaxJsonSuccessMessage(sb.toString());
    }
    
    public String updateOrderRelieveSuspensionon(){
    	String[] orderSubNos = this.getParameterValues("ids[]");//StringUtils.split(order.getOrderNo(), ",");
    	StringBuffer sb = new StringBuffer();
    	for(String orderSubNo:orderSubNos)
    	{		
    		
    		try {

    			String orderNo = orderNoService.getOrderNoBySubNo(orderSubNo);;
				String sb2=orderMainService.updateOrderRelieveSuspensionon(orderNo);

				sb.append(sb2);
			} catch (Exception e) {
				e.printStackTrace();
				sb.append("订单解挂失败!");
				logger.error("{}", e.getMessage());
			}
    	}
    	//return SUCCESS;
    	return ajaxJsonSuccessMessage(sb.toString());
    }	
    
    /**
     * 刷新快递公司集合
     * Description:
     */
    private void refreshLogisticsCodes(){
    	logisticsCodes = optionService.getOptionByCode("logisticsCode");
    }
    
    /**
     * 刷新仓库编码
     * Description:
     */
    public void refreshWareHouses() {
    	try{
    		wareHouses = skuStockSearchService.queryEstoreWarehouseList();
    	} catch(Exception e) {
    		e.printStackTrace();
    	}
    }
    	
    	
}
